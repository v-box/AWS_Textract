# -*- coding: utf-8 -*-
"""InspektlabsCompetition-KrishnaPrasad.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TWHiCwtJPrO65g97H4A89ZcDRfHUvB7n

# Data Preparing
"""

"""# Initiating Extraction Tools"""
import os

os.system('pip install boto3')
import glob
import boto3
import sys
import re
import json
import pandas as pd
import numpy as np

"""# Extract data and save it in txt file using boto textract"""

### required functions for text extraction

def get_kv_map(file_name):
  with open(file_name, 'rb') as file:
      img_test = file.read()
      bytes_test = bytearray(img_test)
      #print('Image loaded', file_name)

  # process using image bytes
  AWSAccessKeyId = 'AKIAT3ANGMEQLKMQ5N7B'
  AWSSecretKey = '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'

  client = boto3.client(
      'textract',
      region_name='us-west-2',
      aws_access_key_id=AWSAccessKeyId,
      aws_secret_access_key=AWSSecretKey
  )
  response = client.analyze_document(Document={'Bytes': bytes_test}, FeatureTypes=['FORMS'])

  # Get the text blocks
  blocks=response['Blocks']
  
  # get key and value maps
  key_map = {}
  value_map = {}
  block_map = {}
  for block in blocks:
      block_id = block['Id']
      block_map[block_id] = block
      if block['BlockType'] == "KEY_VALUE_SET":
          if 'KEY' in block['EntityTypes']:
              key_map[block_id] = block
          else:
              value_map[block_id] = block

  return key_map, value_map, block_map


def get_kv_relationship(key_map, value_map, block_map):
  kvs = {}
  for block_id, key_block in key_map.items():
      value_block = find_value_block(key_block, value_map)
      key = get_text(key_block, block_map)
      val = get_text(value_block, block_map)
      kvs[key] = val
  return kvs


def find_value_block(key_block, value_map):
  for relationship in key_block['Relationships']:
      if relationship['Type'] == 'VALUE':
          for value_id in relationship['Ids']:
              value_block = value_map[value_id]
  return value_block


def get_text(result, blocks_map):
  text = ''
  if 'Relationships' in result:
      for relationship in result['Relationships']:
          if relationship['Type'] == 'CHILD':
              for child_id in relationship['Ids']:
                  word = blocks_map[child_id]
                  if word['BlockType'] == 'WORD':
                      text += word['Text'] + ' '
                  if word['BlockType'] == 'SELECTION_ELEMENT':
                      if word['SelectionStatus'] == 'SELECTED':
                          text += 'X '    

                              
  return text

def print_kvs(kvs):
  for key, value in kvs.items():
      print(key, ":", value)
  print('\n\n\n')


def search_value(kvs, search_key):
  for key, value in kvs.items():
      if re.search(search_key, key, re.IGNORECASE):
          return value

# Commented out IPython magic to ensure Python compatibility.
os.system('mkdir output)
img_list = glob.glob("/RC/*.jpg")
for i in range(0,len(img_list)):
  file_name = img_list[i]
  files = file_name.replace('.jpg','').split('/')[3]
  
  #def main(file_name):

  key_map, value_map, block_map = get_kv_map(file_name)
  kvs = get_kv_relationship(key_map, value_map, block_map)

  # Start searching a key value
  dic = {}
  keys_list = [['NAME','Name & Address',"Owner's Name"],['REGN.NO','REGN . NO','REGN. NO','Registration No'] ,['CH. NO','CH.NO','Chassis No.','Chasis No.'],['E NO','Engine','Engine No.'],['REG. DT','REG. DT.','REG.DT.','Valid From','Date of Issue','REGN DT'],['MFG.DT','MFG. DT','MFG. DT.','Month and Year of Mfg.','Month/ Yr of','MFG DT']]
  for key_list in keys_list:
    for search_key in key_list:
      data = search_value(kvs, search_key)
      if not data is None:
        dic['{}'.format(search_key)]=data
        #print(search_key ,' : ' ,data)
        break
  dct = {k:[v] for k,v in dic.items()} 
  df = pd.DataFrame(dct)
  os.system('cd /output/')
  df.to_csv('{}_data_{}.csv'.format(i,files))

print()
print()
print('ALL IMAGES TURNED TO CSV FILES SUCCESFULLY')
print()
print()

csv_list = glob.glob('/output/*.csv')
dff = pd.concat(map(pd.read_csv,csv_list))
os.system('cd ..')
dff.to_csv('final_output.csv')
print()
print()
print('ALL CSV FILES TURNED TO ONE CSV FILE SUCCESFULLY')
print()
print()


#os.system('cd /content/')
ndf = pd.read_csv('final_output.csv',encoding='latin1')
clms = ndf.columns

result = pd.DataFrame(columns=["NAME","Registration Number","Chassis Number","Engine Number","Manufacture Data","Registration Date"])
result['NAME']=ndf[ndf.columns[0]]

l=0
for key_list in keys_list:
  for clm in clms:
    if clm in key_list:
      id = ndf.columns.get_loc(clm)
      print(ndf.columns[id],l)
      result[result.columns[l]]=result[result.columns[l]].astype(str)+' google '+ndf[ndf.columns[id]].astype(str)
  l+=1
result['NAME'] = result.NAME.replace('0','',regex=True)
result = result.replace('nan','',regex=True)
result = result.replace('google',' ',regex=True)
result = result.replace(',,',',',regex=True)
result.to_csv('Output_final.csv')


os.system('rm -r output')
os.system('rm -r final_output.csv')


print()
print()
print('PROJECT SUCCESSS 100%')
print()
print()
